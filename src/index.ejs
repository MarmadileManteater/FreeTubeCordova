<!DOCTYPE html>
<html>

  <head>
    <% if (process.env.IS_ANDROID) { %>
      <!-- 🔧🐒 -->
      <script>
        window.ofetch = window.fetch
        window.fetch = async (...args) => {
          const requestId = crypto.randomUUID()
          let body
          for (const arg of args) {
            if (typeof arg === 'object') {
              if ('body' in arg) {
                body = arg.body
              }
              if ('headers' in arg) {
                // TODO refactor this code to help move away from file uris
                if ('append' in arg.headers) {
                  if (arg.headers.get('x-youtube-client-name') == 5) {
                    arg.headers.append('x-fta-request-id', requestId)
                    Android.queueFetchBody(requestId, body)
                  }
                } else {
                  if ('x-youtube-client-name' in arg.headers) {
                    if (arg.headers['x-youtube-client-name'] == 5) {
                      arg.headers['x-fta-request-id'] = requestId
                      Android.queueFetchBody(requestId, body)
                    }
                  }
                }
              }
            }
          }

          if (typeof args[0] === 'string' && args[0].startsWith('file://')) {
            // forward to xml http request
            /** @type {Response} */
            const response = await new Promise((resolve, reject) => {
              const req = new XMLHttpRequest()
              req.responseType = 'arraybuffer'
              req.onload = () => {
                resolve(new Response(req.response, { status: req.status, headers: { 'Content-Type': req.getResponseHeader('content-type') } }))
              }
              req.onerror = (error) => {
                reject(error)
              }
              req.open('GET', args[0])
              req.send()
            })
            return response
          }
          return await window.ofetch(...args)
        }
        window.mediaSessionListeners = window.mediaSessionListeners || {}
        window.addMediaSessionEventListener = function (eventName, listener) {
          if (!(eventName in window.mediaSessionListeners)) {
            window.mediaSessionListeners[eventName] = [];
          }
          window.mediaSessionListeners[eventName].push(listener)
        }
        window.notifyMediaSessionListeners = function (eventName, ...message) {
          if ((eventName in window.mediaSessionListeners)) {
            window.mediaSessionListeners[eventName].forEach(listener => listener(...message));
          }
        }
        window.clearAllMediaSessionEventListeners = function () {
          window.mediaSessionListeners = {}
        }
        window.awaitAsyncResult = function (id, callbacks = {}) {
          return new Promise((resolve, reject) => {
            const interval = setInterval(async () => {
              if (id in window) {
                clearInterval(interval)
                try {
                  if ('callbacks' in window[id]) {
                    Object.assign(window[id].callbacks, callbacks)
                  }
                  const result = await window[id].promise
                  resolve(Android.getSyncMessage(id))
                } catch (ex) {
                  reject(Android.getSyncMessage(id))
                }
              }
            }, 1)
          })
        }
      </script>
    <% } %>
    <meta charset="utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1.0" />
    <% if (!process.env.IS_ELECTRON && !process.env.IS_ANDROID) { %>
    <link rel="manifest" href="./static/manifest.webmanifest" />
    <link rel="shortcut icon" href="static/icon.ico" />
    <% } %>
    <title></title>
  </head>

  <body>
    <div id="app"></div>
    <% if (!process.env.IS_ELECTRON && !process.env.IS_ANDROID) { %>
    <script>
    // This is the service worker with the Advanced caching

    // Add this below content to your HTML page, or add the js file to your page at the very top to register service worker

    // Check compatibility for the browser we're running this in
    if ("serviceWorker" in navigator) {
      if (navigator.serviceWorker.controller) {
        console.log("[PWA Builder] active service worker found, no need to register");
      } else {
        // Register the service worker
        navigator.serviceWorker
          .register("pwabuilder-sw.js", {
            scope: "./"
          })
          .then(function (reg) {
            console.log("[PWA Builder] Service worker has been registered for scope: " + reg.scope);
          });
      }
    }
    </script>
    <% } %>
    <!-- webpack builds are automatically injected -->
  </body>

</html>
